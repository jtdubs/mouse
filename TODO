Exploration mode:
- Pull out queue and stack helper libraries in utils/
- There are definitely opportunities to speed up "unwinding" when a shortcut presents itself.
- Can also skip visiting cells if we've learned about all it's walls from other vantage points.
- Maze and Explore queue updates need to be in an atomic block...

Solve mode:
- Would be helpful to factor out the "face", "advance", etc. stuff from explorer first.
- Just walks the distance gradient calculated by exploration mode and stops in the center.

Linear:
- It would probably be easier if linear motion took a target position rather than a distance.
- Then we just do a "tare" when we change directions, setting the position to what we believe it is.

Volatile:
- Replace with getter functions that take "out" variables and include an atomic block.
- This should let us clean up the header files a bit.

Timer:
- Main timer interrupt should probably be ISR_NONBLOCK.
- Tighten tick to run every 1-2ms instead of 5.
  - This is problematic as the encoder pulses are relatively infrequent, so we'll end up with either 0 or 1 each tick...
  - This may be "okay" if we just make the low-pass filter stronger?

Board improvements:
- Center of mass too far back due to battery, makes it prone to "bucking" under heavy acceleration.
- Nose too big, makes turning towards a wall VERY tight.
- Better connectors for motors and sensor board.
- Velcro'd battery is wobbily standing up on edge.

High-level phases of development:
[x] Learn to operate the hardware.
[x] Learn to drive specific distances / turn specific angles.
[x] Learn not to hit walls.
[x] Learn to map out a maze.
[ ] Learn to drive the solution to a maze.
